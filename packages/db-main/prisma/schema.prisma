generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  // output = "../src/generated"
}

generator pothos {
  provider     = "prisma-pothos-types"
  clientOutput = "@prisma/client"
  output       = "../src/generated/pothos-types.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")

}

model Company {
  id        String   @id @default(cuid())
  slug      String   @unique
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Contact Contact[]
  @@map(name: "company")
}

model PocProject {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  description String
  service     String
  firstName   String?
  lastName    String?
  gsm         String?
  email       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map(name: "poc_project")
  Contact Contact[]
}

model Contact {
  id            String    @id @default(cuid())
  firstName     String?   @db.VarChar(80)
  lastName      String?   @db.VarChar(80)
  email         String    @unique @db.VarChar(150)
  emailVerified DateTime?
  gsm           String?   @db.VarChar(20)

  companyId String
  company   Company  @relation(fields: [companyId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  MeetingAttendees MeetingAttendee[]
  MeetingReview    MeetingReview[]
  PocProject       PocProject?       @relation(fields: [pocProjectId], references: [id])
  pocProjectId     String?
  @@unique([companyId, email])
  @@map(name: "contact")
}

model Project {
  id        String   @id @default(cuid())
  slug      String   @unique
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Meetings Meeting[]
  @@map(name: "project")
}

enum MeetingStatus {
  PENDING    @map("pending")
  CONFIRMED  @map("confirmed")
  CANCELLED  @map("cancelled")
  COMPLETED  @map("completed")
}

model Meeting {
  id               String            @id @default(cuid())
  slug             String            @unique
  userId           Int?
  User             User?             @relation(fields: [userId], references: [id])
  title            String
  description      String
  projectId        String
  Project          Project           @relation(fields: [projectId], references: [id])
  timeZone         String            @default("Europe/Brussels")
  startAt          DateTime
  endAt            DateTime
  meetProvider     String
  meetProviderUrl  String
  status           MeetingStatus     @default(PENDING)
  MeetingReview    MeetingReview[]
  MeetingAttendees MeetingAttendee[]

  @@map(name: "meeting")
}

model MeetingReview {
  id        String   @id @default(cuid())
  meetingId String
  starCount Int?
  comment   String?
  Meeting   Meeting  @relation(fields: [meetingId], references: [id])
  contactId String
  Contact   Contact  @relation(fields: [contactId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([meetingId, contactId])
  @@map(name: "meeting_review")
}

enum MeetingAttendeeRole {
  OWNER   @map("owner")
  AGENCY  @map("agency")
  CLIENT  @map("client")
}

model MeetingAttendee {
  id          String              @id @default(cuid())
  meetingId   String
  role        MeetingAttendeeRole
  Meeting     Meeting             @relation(fields: [meetingId], references: [id])
  contactId   String
  Contact     Contact             @relation(fields: [contactId], references: [id])
  connectedAt DateTime?
  endedAt     DateTime?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  @@unique([meetingId, contactId])
  @@map(name: "meeting_attendees")
}

model Post {
  id          Int       @id @default(autoincrement())
  slug        String    @unique
  title       String    @db.VarChar(300)
  content     String    @db.Text
  link        String?   @db.VarChar(300)
  image       String?   @db.VarChar(300)
  author      User?     @relation(fields: [authorId], references: [id])
  authorId    Int?
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@map(name: "post")
}

model User {
  id            Int       @id @default(autoincrement())
  firstName     String?   @db.VarChar(80)
  lastName      String?   @db.VarChar(80)
  nickname      String    @unique @db.VarChar(64)
  email         String    @unique @db.VarChar(150)
  emailVerified DateTime?
  password      String?   @db.VarChar(255)
  avatarUrl     String?   @db.VarChar(255)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  Post    Post[]
  Meeting Meeting[]
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("auth_accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("auth_sessions")
}

model VerificationToken {
  identifier String   @db.VarChar(255)
  token      String   @unique @db.VarChar(255)
  expires    DateTime

  @@unique([identifier, token])
  @@map("auth_verification_tokens")
}
