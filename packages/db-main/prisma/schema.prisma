generator client {
  provider = "prisma-client-js"
  // output = "../src/generated"
}

generator pothos {
  provider = "prisma-pothos-types"
  clientOutput = "@prisma/client"
  output = "../src/generated/pothos-types.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

model Post {
  id          Int       @id @default(autoincrement())
  slug        String    @unique
  title       String    @db.VarChar(300)
  content     String    @db.Text
  link        String?   @db.VarChar(300)
  image       String?   @db.VarChar(300)
  author      User?     @relation(fields: [authorId], references: [id])
  authorId    Int?
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map(name: "post")
}

model User {
  id            Int       @id @default(autoincrement())
  firstName     String?   @db.VarChar(80)
  lastName      String?   @db.VarChar(80)
  nickname      String    @unique @db.VarChar(64)
  email         String    @unique @db.VarChar(150)
  emailVerified DateTime?
  password      String?   @db.VarChar(255)
  avatarUrl     String?   @db.VarChar(255)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  Post Post[]
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("auth_accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("auth_sessions")
}

model VerificationToken {
  identifier String   @db.VarChar(255)
  token      String   @unique @db.VarChar(255)
  expires    DateTime

  @@unique([identifier, token])
  @@map("auth_verification_tokens")
}
