name: CI-e2e-website

on:
  push:
    branches:
      - dev
      - main
    paths:
      - 'apps/website/**'
      - 'packages/**'
      - 'package.json'
      - '*.lock'
      - '.yarnrc.yml'
      - '*.base.json'
      - '*.base.js'
      - '.prettier*.*'
      - '.github/workflows/**'

  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    # Optional:
    #   Only consider those files/paths to trigger the github action
    #   to prevent unnecessary builds.
    paths:
      - 'apps/website/**'
      - 'packages/**'
      - 'package.json'
      - '*.lock'
      - '.yarnrc.yml'
      - '*.base.json'
      - '*.base.js'
      - '.prettier*.*'
      - '.github/workflows/**'

jobs:
  e2e:
    timeout-minutes: 10

    strategy:
      fail-fast: false
      matrix:
        node-version:
          - 16
        os:
          - ubuntu-latest
        include:
          - os: ubuntu-latest
            playwright_binary_path: ~/.cache/ms-playwright

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - uses: ./.github/actions/monorepo-install

      # see https://github.com/vercel/next.js/pull/27362
      - name: Restore nextjs build website from cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/apps/website/.next/cache
            ${{ github.workspace }}/.cache
            ${{ github.workspace }}/**/tsconfig.tsbuildinfo

          key: ${{ runner.os }}-website-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('apps/website/src/**.[jt]sx?', 'apps/website/src/**.json') }}
          restore-keys: |
            ${{ runner.os }}-website-${{ hashFiles('**/yarn.lock') }}-

      - name: Start database
        working-directory: packages/db-main
        run: docker-compose -f docker-compose.e2e.yml up --detach

      - name: Create and seed test database
        working-directory: packages/db-main
        run: |
          yarn prisma db push
          yarn prisma db seed
        env:
          PRISMA_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/webapp-e2e?schema=public

      - name: Build website
        working-directory: apps/website
        run: |
          yarn build
        env:
          PRISMA_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/webapp-e2e?schema=public
          # Don't need to lint / typecheck for e2e, they're done in another workflow
          NEXTJS_IGNORE_ESLINT: true
          NEXTJS_IGNORE_TYPECHECK: true
          NEXT_DISABLE_SOURCEMAPS: true
          NEXT_TELEMETRY_DISABLED: true
          NEXTJS_SENTRY_UPLOAD_DRY_RUN: true
          NEXT_PUBLIC_PUSHER_CLUSTER: eu
          NEXT_PUBLIC_PUSHER_KEY: blah
          PUSHER_APP_ID: 111
          PUSHER_SECRET: balah

      # Keep cached playwright binaries to required version
      # https://playwright.dev/docs/ci#caching-browsers
      - name: Get current Playwright version
        id: playwright-version
        shell: bash
        run: |
          playwright_version=$(npm info @playwright/test version)
          echo "::set-output name=version::${playwright_version}"

      - name: Get playwright cache-key
        id: playwright-cache-key
        run: |
          playwright_cache_key="PL1-${{ runner.os }}-playwright-cache-${{ steps.playwright-version.outputs.version }}"
          echo "::set-output name=key::${playwright_cache_key}"      

      - name: Cache Playwright binaries
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: ${{ matrix.playwright_binary_path }}
          key: ${{ steps.playwright-cache-key.outputs.key }}

      - name: Playwright debug
        shell: bash
        run: |
          echo "OS: ${{ matrix.os }}"
          echo "Playwright version: ${{ steps.playwright-version.outputs.version }}"
          echo "Playwright install dir: ${{ matrix.playwright_binary_path }}"
          echo "Cache key: ${{ steps.playwright-cache-key.outputs.key }}"
          echo "Cache hit: ${{ steps.playwright-cache.outputs.cache-hit == 'true' }}"

      - name: Install Playwright OS deps
        run: yarn playwright install-deps

      - name: Install Playwright Browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: yarn playwright install chromium webkit

      - name: E2E run website playwright tests
        working-directory: apps/website
        run: |
          xvfb-run --auto-servernum --server-args="-screen 0 1280x960x24" -- yarn test-e2e
        env:
          E2E_WEBSERVER_MODE: START
          CI: 1
          PRISMA_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/webapp-e2e?schema=public

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: website-playwright-test-results
          path: apps/website/e2e/.out
